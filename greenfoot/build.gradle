apply plugin: 'java-library'
apply plugin: 'org.openjfx.javafxplugin'
apply plugin: 'application'

dependencies {
    annotationProcessor project(':anns-threadchecker')
    compileOnly project(':anns-threadchecker')
    annotationProcessor project(':threadchecker')
    compileOnly project(':threadchecker')
    implementation project(':bluej')
    implementation project(':boot')

    implementation 'au.com.bytecode:opencsv:2.4'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.apache.httpcomponents:httpmime:4.1.1'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'javazoom:jlayer:1.0.1'
    implementation 'org.glavo:simple-png:0.2.0'
    implementation 'org.glavo:simple-png-javafx:0.2.0'

    testCompileOnly project(':anns-threadchecker')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.5.2'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.5.2'
}

repositories {
    mavenCentral()
}

javafx {
    version = "23.0.2"  // javafx_version_setting <-- The Github Actions on Linux uses this to find and replace this line
    modules = ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.swing', 'javafx.web']
}

test {
    useJUnit()
}

compileJava {
    options.compilerArgs += ["-Xplugin:threadchecker.TCPlugin"]
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release = 21
}

task copyLibToBuild(type: Copy) {
    from '../bluej/lib'
    from 'lib'
    from 'labels'
    into new File(sourceSets.main.output.resourcesDir, 'lib')
}

task copyImagelibToBuild(type: Copy) {
    from 'imagelib'
    into new File(sourceSets.main.output.resourcesDir, 'lib/greenfoot/imagelib')
}
task copyGreenfootIcon1(type: Copy) {
    from file('resources/images/greenfoot-icon-16.png')
    into new File(sourceSets.main.output.resourcesDir, 'lib/greenfoot/imagelib/other')
    rename { 'greenfoot.png' }
}
task copyGreenfootIcon2(type: Copy) {
    from file('resources/images/greenfoot-icon-16.png')
    into new File(sourceSets.main.output.resourcesDir, 'images')
    rename { 'greenfoot.png' }
}

assemble.dependsOn copyLibToBuild
assemble.dependsOn copyImagelibToBuild
assemble.dependsOn copyGreenfootIcon1
assemble.dependsOn copyGreenfootIcon2
jar.dependsOn copyLibToBuild
jar.dependsOn copyImagelibToBuild
jar.dependsOn copyGreenfootIcon1
jar.dependsOn copyGreenfootIcon2
compileTestJava.dependsOn copyLibToBuild
compileTestJava.dependsOn copyImagelibToBuild
compileTestJava.dependsOn copyGreenfootIcon1
compileTestJava.dependsOn copyGreenfootIcon2

task copyToLib(type: Copy) {
    into new File(sourceSets.main.output.resourcesDir, 'lib')
    from configurations.runtimeClasspath
    from 'lib'
    from 'labels'
    from '../bluej/build/libs/bluej.jar'
}
copyToLib.dependsOn ':bluej:blueJCoreJar'
copyToLib.dependsOn jar

task greenfootJar(type: Jar) {
    archiveFileName = "greenfoot.jar"
    from "build/classes/java/main"
    from('resources/images') {
        include "readme.png",
                // Empty image - just to force same layout of compile and readme button
                "compile.png",
                // Image used when dragging object over an area where it can not be dropped
                "noParking.png",
                // Image selection dialog icon
                "openRight.png",
                // Control panel icons
                "run.png", "step.png", "pause.png", "reset.png",
                // Export icons
                "export-app.png", "export-project.png", "export-publish.png", "export-publish-small.png", "export-webpage.png",
                // Menu button used in image library dialog (gear with drop-arrow)
                "menu-button.png",
                // Execution/activity twirler
                "swirl.png",
                "dropdown.png"
    }
    destinationDirectory = new File(sourceSets.main.output.resourcesDir, 'lib')
}
greenfootJar.dependsOn compileJava
assemble.dependsOn greenfootJar
assemble.dependsOn copyToLib
jar.dependsOn greenfootJar
compileTestJava.dependsOn copyToLib

task runGreenfoot(type: JavaExec) {
    group = 'application'
    classpath = files('build/resources/main/lib/boot.jar') + sourceSets.main.runtimeClasspath + files('build/resources/main/lib/greenfoot.jar')
    main = "bluej.Boot"
    args "-bluej.debug=true", "-greenfoot=true"

}
runGreenfoot.dependsOn build


group = 'org.bluej'
description = 'greenfoot'

task userJavadoc(type: Javadoc) {
    doFirst {
        mkdir("../bluej/doc/API")
    }
    source = sourceSets.main.allJava
    includes = ['greenfoot/Actor.java',
                'greenfoot/Color.java',
                'greenfoot/Font.java',
                'greenfoot/Greenfoot.java',
                'greenfoot/GreenfootImage.java',
                'greenfoot/GreenfootSound.java',
                'greenfoot/MouseInfo.java',
                'greenfoot/UserInfo.java',
                'greenfoot/World.java']
    destinationDir = file("../bluej/doc/API")
    classpath = sourceSets.main.output.classesDirs + project.configurations.compileClasspath
}
userJavadoc.dependsOn assemble

task packageGreenfootMacIntel(type: Exec) {
    workingDir "../bluej/package"
    environment JAVA_HOME: System.getProperty('java.home')
    commandLine toolProps["ant_exe"], "-buildfile", "greenfoot-build.xml", "mac-dist",
            "-Dbuild_java_home=" + System.getProperty('java.home'),
            "-Dmac_bundled_jdk_path=" + System.getProperty('java.home'),
            "-Dgreenfoot.version=" + greenfootVersion,
            "-Dgreenfoot.rcsuffix=" + greenfootRCSuffix,
            "-Dbluej_home=" + rootDir.getAbsoluteFile() + "/bluej/",
            "-Dgreenfoot_home=" + projectDir.getAbsoluteFile(),
            "-Dmac_arch=x86_64",
            "-Dmac_bundler_arch_dir=x64"
}
task packageGreenfootMacAarch(type: Exec) {
    workingDir "../bluej/package"
    environment JAVA_HOME: System.getProperty('java.home')
    commandLine toolProps["ant_exe"], "-buildfile", "greenfoot-build.xml", "mac-dist",
            "-Dbuild_java_home=" + System.getProperty('java.home'),
            "-Dmac_bundled_jdk_path=" + System.getProperty('java.home'),
            "-Dgreenfoot.version=" + greenfootVersion,
            "-Dgreenfoot.rcsuffix=" + greenfootRCSuffix,
            "-Dbluej_home=" + rootDir.getAbsoluteFile() + "/bluej/",
            "-Dgreenfoot_home=" + projectDir.getAbsoluteFile(),
            "-Dmac_arch=arm64",
            "-Dmac_bundler_arch_dir=aarch64"
}

task packageGreenfootLinuxRpm(type: Exec) {
    description "Packages Greenfoot ${project.hasProperty('greenfootVersion') ? greenfootVersion : ''} for Linux (RPM) using Ant."
    group "packaging"

    dependsOn assemble, userJavadoc
    workingDir "../bluej/package"

    doFirst {
        // ... (your existing checks for toolProps, greenfootVersion) ...

        // Ensure greenfootRCSuffix exists, default to empty if not explicitly set
        if (!project.hasProperty('greenfootRCSuffix')) {
            greenfootRCSuffix = ""
//            logger.warn("'greenfootRCSuffix' not found, defaulting to empty string for base suffix.")
        }
    }

    commandLine {
        def antExecutable = toolProps["ant_exe"]
        def buildFile = "greenfoot-rpm-build.xml"
        def antTarget = "rpm-dist"

        // Calculate the RPM-compatible release suffix
        String rpmReadyRcSuffix = ""
        if (greenfootRCSuffix != null && !greenfootRCSuffix.isEmpty()) {
            String baseSuffix = greenfootRCSuffix
            if (baseSuffix.startsWith("-")) {
                baseSuffix = baseSuffix.substring(1) // Remove leading "-" -> "rc2" from "-rc2"
            }
            if (!baseSuffix.isEmpty()) {
                rpmReadyRcSuffix = "." + baseSuffix // Prepend dot -> ".rc2"
            }
        }

        // Build the command line arguments
        def cmd = ["fakeroot", antExecutable, "-buildfile", buildFile, antTarget]
        cmd.add("-Dbuild_java_home=" + System.getProperty('java.home'))
        cmd.add("-Dgreenfoot.version=" + greenfootVersion)
        // Pass the original rcsuffix if Ant needs it for other purposes (e.g. archive naming if it differs)
        cmd.add("-Dgreenfoot.rcsuffix.original=" + greenfootRCSuffix)
        // Pass the processed suffix specifically for RPM release tag
        cmd.add("-Dgreenfoot.rpmreleasesuffix=" + rpmReadyRcSuffix)
        cmd.add("-Dbluej_home=" + rootDir.getAbsoluteFile() + "/bluej/")
        cmd.add("-Dgreenfoot_home=" + projectDir.getAbsoluteFile())
        cmd.add("-Drpm_bundled_jdk_path=" + System.getProperty('java.home'))
        return cmd.iterator()
    }
}
packageGreenfootMacIntel.dependsOn assemble, userJavadoc
packageGreenfootMacAarch.dependsOn assemble, userJavadoc

task packageGreenfootWindows(type: Exec) {
    workingDir "../bluej/package"
    commandLine toolProps["ant_exe"], "-buildfile", "greenfoot-build.xml", "windows-msi-bundled-dist", "windows-standalone",
            "-Dbuild_java_home=" + System.getProperty('java.home'),
            "-Dwin_bundled_jdk_path=" + System.getProperty('java.home'),
            "-Dgreenfoot.version=" + greenfootVersion,
            "-Dgreenfoot.rcsuffix=" + greenfootRCSuffix,
            "-Dbluej_home=" + rootDir.getAbsoluteFile() + "/bluej/",
            "-Dgreenfoot_home=" + projectDir.getAbsoluteFile(),
            "-Dmingw_root=" + toolProps["mingw_root"],
            "-Dwix_bin=" + toolProps["wix_bin"]
}
packageGreenfootWindows.dependsOn assemble, userJavadoc

task packageGreenfootLinux(type: Exec) {
    workingDir "../bluej/package"
    commandLine "fakeroot", toolProps["ant_exe"], "-buildfile", "greenfoot-build.xml", "dist", "debian-bundled-dist",
            "-Dbuild_java_home=" + System.getProperty('java.home'),
            "-Ddeb_bundled_jdk_path=" + System.getProperty('java.home'),
            "-Dgreenfoot.version=" + greenfootVersion,
            "-Dgreenfoot.rcsuffix=" + greenfootRCSuffix,
            "-Dbluej_home=" + rootDir.getAbsoluteFile() + "/bluej/",
            "-Dgreenfoot_home=" + projectDir.getAbsoluteFile()
}
packageGreenfootLinux.dependsOn assemble, userJavadoc

distTar.enabled = false
distZip.enabled = false

task urlsRC(type: Exec) {
    workingDir "../bluej/package"
    commandLine toolProps["ant_exe"], "-S", "-buildfile", "greenfoot-build.xml", "urls-rc",
            "-Dbuild_java_home=" + System.getProperty('java.home'),
            "-Dgreenfoot.version=" + greenfootVersion,
            "-Dgreenfoot.rcsuffix=" + greenfootRCSuffix
}
